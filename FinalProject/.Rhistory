LA <- read_csv("Addresses_in_the_City_of_Los_Angeles.csv")
number <-10
#put sample data in a form that can be used for the address input in the getDeepSearchResults function.
sample <- LA[sample(1:nrow(LA), size = number), ]
sample <- paste(sample$HSE_NBR, sample$HSE_DIR_CD, sample$STR_NM, sample$STR_SFX_CD)
parseData <- function(x, ...){
response1 <- xmlChildren(xmlChildren(xmlChildren(x$response)$results)$result)
address <- xmlToList(response1$address) %>% unlist(response1[["address"]])
street <- address[["street"]]
zipcode <- address[["zipcode"]]
city <- address[["city"]]
useCode <- xmlValue(response1[["useCode"]])
taxYear <- xmlValue(response1[["taxAssessmentYear"]])
taxValue <- xmlValue(response1[["taxAssessment"]])
yearBuilt <- xmlValue(response1[["yearBuilt"]])
lotSize <- xmlValue(response1[["lotSizeSqFt"]])
sqft <- xmlValue(response1[["finishedSqFt"]])
bath <- xmlValue(response1[["bathrooms"]])
bed <- xmlValue(response1[["bedrooms"]])
zestimate <- xmlValue(response1$zestimate[["amount"]])
regionName <- unlist(xmlChildren(response1$localRealEstate)$region)[["attributes.name"]]
regionType <- unlist(xmlChildren(response1$localRealEstate)$region)[["attributes.type"]]
result <- cbind(street, zipcode, city, useCode, taxYear, taxValue, yearBuilt, lotSize, sqft, bath, bed, zestimate, regionName, regionType)
return(result)
}
thisThing <- c()
for(i in 1:length(sample)){
list <- GetDeepSearchResults(address = sample[i], citystatezip = "Los Angeles, CA", zws_id =       "X1-ZWz1h7uqpnpv63_2hwdv")
check <- xmlValue(list$response)
if(is.na(check)==TRUE){
next
}else{
thisThing <- c(thisThing, parseData(list))
write_csv(as.data.frame(thisThing), "C:/Users/Kelly/Documents/ZillowLA1.csv", append = TRUE)
}}
}
Zillowdata <- read_csv("ZillowLA1.csv")
getwd()
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowLA1.csv")
data <- filter(Zillowdata, 1:10)
data <- Zillowdata[30000,]
View(data)
View(data)
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowUpdated1000.csv")
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowUpdated1000.csv")
View(Zillowdata)
View(Zillowdata)
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowWorkingSheet.csv")
View(Zillowdata)
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowWorkingSheet.csv")
Zillowdata1 <- as.data.frame(Zillowdata)
ZillowdataUnique <- unique(Zillowdata1)
View(ZillowdataUnique)
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowWorkingSheet.csv")
Zillowdata1 <- as.data.frame(Zillowdata)
View(Zillowdata1)
View(Zillowdata1)
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowWorkingSheet.csv")
Zillowdata1 <- as.data.frame(Zillowdata)
#Remove rows with NA from data sheet
data <- Zillowdata1[complete.cases(Zillowdata1), ]
View(data)
View(data)
Zillow <- data %>% select(taxValue, yearBuilt, sqft, bed, zestimate)
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowWorkingSheet.csv")
Zillowdata1 <- as.data.frame(Zillowdata)
#Remove rows with NA from data sheet
data <- Zillowdata1[complete.cases(Zillowdata1), ]
Zillow <- data %>% select(taxValue, yearBuilt, sqft, bed, zestimate)
View(data)
View(data)
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowWorkingSheet.csv")
Zillowdata1 <- as.data.frame(Zillowdata)
#Remove rows with NA from data sheet
data <- Zillowdata1[complete.cases(Zillowdata1), ]
Zillow <- data %>% select(taxValue, yearBuilt, sqft, bed, zestimate)
Train <- sample(1:nrow(Zillow), size = nrow(Zillow)*0.8)
Test <- dplyr::setdiff(1:nrow(Zillow), train)
Train <- sample(1:nrow(Zillow), size = nrow(Zillow)*0.8)
Test <- dplyr::setdiff(1:nrow(Zillow), Train)
ZillowTrain <- Zillow[Train, ]
ZillowTest <- Zillow[Test, ]
baggedTree <- train(zestimate ~ ., data = ZillowTrain, method = "treebag",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 5),
preProcess = c("center", "scale"))
library(caret)
Train <- sample(1:nrow(Zillow), size = nrow(Zillow)*0.8)
Test <- dplyr::setdiff(1:nrow(Zillow), Train)
ZillowTrain <- Zillow[Train, ]
ZillowTest <- Zillow[Test, ]
baggedTree <- train(zestimate ~ ., data = ZillowTrain, method = "treebag",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 5),
preProcess = c("center", "scale"))
#predict and make a table
baggedTbl <- table(data.frame(pred = predict(baggedTree, ZillowTest), true = ZillowTest$zestimate))
1-sum(diag(baggedTbl)/sum(baggedTbl))
lmfit <- lm(zestimate~., data= zillowTrain)
lmfit <- lm(zestimate~., data= ZillowTrain)
lmtable <- table(data.frame(pred = predict(lmfit, ZillowTest), true = ZillowTest$zestimate))
1-sum(diag(lmTbl)/sum(lmTbl))
lmfit <- lm(zestimate~., data= ZillowTrain)
lmtable <- table(data.frame(pred = predict(lmfit, ZillowTest), true = ZillowTest$zestimate))
1-sum(diag(lmTable)/sum(lmTable))
lmfit <- lm(zestimate~., data= ZillowTrain)
lmTable <- table(data.frame(pred = predict(lmfit, ZillowTest), true = ZillowTest$zestimate))
1-sum(diag(lmTable)/sum(lmTable))
#load in packages
library(ZillowR)
library(XML)
library(tidyverse)
library(stats)
library(caret)
#Query Zillow API using only one address
output1 <- GetDeepSearchResults(address = '14707 W SUNNY DR', citystatezip = "Los Angeles, CA",
zws_id = "X1-ZWz17sfy2dx9u3_82rpe")
#baggedtree model
baggedTree <- train(zestimate ~ ., data = ZillowTrain, method = "treebag",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 5),
preProcess = c("center", "scale"))
#predict and make a table
baggedTbl <- table(data.frame(pred = predict(baggedTree, ZillowTest), true = ZillowTest$zestimate))
baggedTbl
1-sum(diag(baggedTbl)/sum(baggedTbl))
#Linear regression model
lmfit <- lm(zestimate~., data= ZillowTrain)
lmTable <- table(data.frame(pred = predict(lmfit, ZillowTest), true = ZillowTest$zestimate))
lmTable
1-sum(diag(lmTable)/sum(lmTable))
Zillowdata <- read_csv("C:/Users/Kelly/Documents/ZillowWorkingSheet.csv")
Zillowdata1 <- as.data.frame(Zillowdata)
#Remove rows with NA from data sheet
data <- Zillowdata1[complete.cases(Zillowdata1), ]
#select columns I want to use in my model
Zillow <- data %>% select(taxValue, yearBuilt, sqft, bed, zestimate)
#split into training and test
Train <- sample(1:nrow(Zillow), size = nrow(Zillow)*0.8)
Test <- dplyr::setdiff(1:nrow(Zillow), Train)
ZillowTrain <- Zillow[Train, ]
ZillowTest <- Zillow[Test, ]
#baggedtree model
baggedTree <- train(zestimate ~ ., data = ZillowTrain, method = "treebag",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 5),
preProcess = c("center", "scale"))
#predict and make a table
baggedTbl <- table(data.frame(pred = predict(baggedTree, ZillowTest), true = ZillowTest$zestimate))
1-sum(diag(baggedTbl)/sum(baggedTbl))
#Linear regression model
lmfit <- lm(zestimate~., data= ZillowTrain)
lmTable <- table(data.frame(pred = predict(lmfit, ZillowTest), true = ZillowTest$zestimate))
1-sum(diag(lmTable)/sum(lmTable))
install.packages("plumber")
library(plumber)
library(tidyverse)
library(haven)
library(knitr)
options(dplyr.print_min = 5)
options(tibble.print_min = 5)
opts_chunk$set(message = FALSE, cache = TRUE)
library(tidyverse)
library(haven)
library(knitr)
options(dplyr.print_min = 5)
options(tibble.print_min = 5)
opts_chunk$set(message = FALSE, cache = TRUE)
#* Echo the parameter that was sent in
#* @param msg The message to echo back.
#* @get /echo
function(msg=""){
list(msg = paste0("The message is: '", msg, "'"))
}
#* Find natural log of a number
#* @param num Number to find ln of
#* @get /ln
function(num){
log(as.numeric(num))
}
#query with http://localhost:80/ln?num=1
#* Find multiple of two numbers
#* @param num1 1st number
#* @param num2 2nd number
#* @get /mult
function(num1, num2){
as.numeric(num1)*as.numeric(num2)
}
#query with http://localhost:80/mult?num1=10&num2=20
#* Plot histogram of iris data
#* @png
#* @get /plotiris
function(){
plot(iris)
}
#query with http://localhost:80/plotiris
#* Plotting widget
#* @serializer htmlwidget
#* @param lat latitude
#* @param lng longitude
#* @get /map
function(lng = 174.768, lat = -36.852){
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(as.numeric(lng), as.numeric(lat))
m  # Print the map
}
#query with http://localhost:80/map?lng=174&lat=-36
library(plumber)
getwd()
r <- plumb("E:/School/ST 558/Homework/Homework 13/myAPI.r")
r <- plumb("E:/School/ST 558/Homework/Homework 13/myAPI.R")
r <- plumb("E:\School\ST 558\Homework\Homework 13/myAPI.R")
r <- plumb("E:/School/ST 558/Homework/Homework 13/myAPI.R")
getwd()
r <- plumb("myAPI.R")
r$run(port= 80)
getwd()
dataset <- iris
dataset <- iris
model <- lm(Petal.Length ~ Petal.Width, data = dataset)
input_data <- data.frame(Petal.Width=1)
predict(model,input_data)
source("make_model.R")
#* @get /predict_petal_length
get_predict_length <- function(petal_width){
# convert the input to a number
petal_width <- as.numeric(petal_width)
# create the prediction data frame
input_data <- data.frame(Petal.Width=as.numeric(petal_width))
# create the prediction
predict(model,input_data)
}
r$run(port=80, host="0.0.0.0")
library(plumber)
r <- plumb("rest_controller.R")
r$run(port=80, host="0.0.0.0")
getwd()
shiny::runApp('ShinyApps/BasicUI/BasicUI')
getwd()
shiny::runApp('BasicApp')
shiny::runApp('BasicApp')
getwd()
shiny::runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
shiny::runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
getwd()
runApp('C:/Users/Kelly/Downloads')
shiny::runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
runApp('DynamicUI')
shiny::runApp('C:/Users/Kelly/Downloads')
shiny::runApp('ST558Project2/Project2')
library(tidyverse)
read_csv(movie_metadata)
read_csv(movie_metadata.csv)
read_csv("movie_metadata.csv")
dataset <- read_csv("movie_metadata.csv")
dataset <- dataset[complete.cases(dataset), ]
head(dataset)
write_csv(dataset, file = "movie_metadataupdated.csv")
write.csv(dataset, file = "movie_metadataupdated.csv")
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
install.packages("shinydashboard")
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
shiny::runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
#Modeling
#Data Pre-Processing
ModData <- dataset %>% select("gross", "cast_total_facebook_likes","budget", "imdb_score")
#split into training and test
Train <- sample(1:nrow(ModData), size = nrow(ModData)*0.8)
Test <- dplyr::setdiff(1:nrow(ModData), Train)
ModTrain <- ModData[Train, ]
ModTest <- ModData[Test, ]#split into training and test
Train <- sample(1:nrow(ModData), size = nrow(ModData)*0.8)
Test <- dplyr::setdiff(1:nrow(ModData), Train)
ModTrain <- ModData[Train, ]
ModTest <- ModData[Test, ]
baggedTree <- train(gross ~ ., data = ModTrain, method = "treebag",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 5),
preProcess = c("center", "scale"))
baggedTree <- train(gross ~ ., data = ModTrain, method = "treebag",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 5),
preProcess = c("center", "scale"))
library(caret)
baggedTree <- train(gross ~ ., data = ModTrain, method = "treebag",
trControl = trainControl(method = "repeatedcv", number = 10, repeats = 5),
preProcess = c("center", "scale"))
baggedTbl <- table(data.frame(pred = predict(baggedTree, ModTest), true = ModTest$gross))
1-sum(diag(baggedTbl)/sum(baggedTbl))
lmfit <- lm(gross~., data= ModTrain)
lmTable <- table(data.frame(pred = predict(lmfit, ModTest), true = ModTest$gross))
1-sum(diag(lmTable)/sum(lmTable))
baggedTree
plot(baggedTree)
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
shiny::runApp('ST558Project2/Project2')
View(dataset)
runApp('ST558Project2/Project2')
getwd()
dataset <- read_csv("movie_metadataupdated.csv")
runApp('ST558Project2/Project2')
View(dataset)
View(dataset)
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
getwd()
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
dataset <- read_csv("movie_metadataupdated.csv")
runApp('ST558Project2/Project2')
dataset <- read_csv("movie_metadataupdated.csv")
View(dataset)
View(dataset)
runApp('ST558Project2/Project2')
dataset <- dataset[complete.cases(dataset), ]
dataset <- dataset %>% subset(genres == "Action" | genres == "Adventure" | genres == "Animation" | genres == "Comedy" | genres == "Drama" | genres == "Fantasy" | genres == "Horror")
Data1 <- dataset %>% select(duration, gross, cast_total_facebook_likes, budget, title_year, imdb_score)
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
dataset <- read_csv("movie_metadataupdated.csv")
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
#dataset <- read_csv("movie_metadata.csv")
#dataset <- dataset[complete.cases(dataset), ]
#write.csv(dataset, file = "movie_metadataupdated.csv")
dataset <- read_csv("movie_metadataupdated.csv")
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
runApp('ST558Project2/Project2')
read_csv("movie_metadataupdated.csv")
shiny::runApp('ST558Project2/Project2')
setwd("~/Git/FinalProject/FinalProject")
runApp('~/ST558Project2/Project2')
read.csv("movie_metadataupdated.csv")
runApp('~/ST558Project2/Project2')
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
movie_metadataupdated <- read_csv("movie_metadataupdated.csv")
View(movie_metadataupdated)
runApp('~/ST558Project2/Project2')
install.packages("xml2")
runApp('~/ST558Project2/Project2')
runApp()
runApp()
